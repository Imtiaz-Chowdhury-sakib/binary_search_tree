#include<iostream>
using namespace std;

struct node{
    int data;
    node *parent;
    node *left;
    node *right;
    node(int val)
    {
        data = val;
        parent = NULL;
        left = NULL;
        right = NULL;
    }
};
struct binary_tree{
    node *root;
    binary_tree()
    {
        root = NULL;
    }
    void insert(node *z)
    {
        node *y = NULL;
        node *x = root;
        while(x!=NULL)
        {
            y = x;
            if(z->data < x->data) x = x->left;
            else x = x->right;
        }
        z->parent=y;
        if(y==NULL) root=z;
        else
        {
            if(z->data < y->data) y->left = z;
            else y->right = z;
        }
    }
    node* search(int data)
    {
        node *temp = root;
        while(temp!=NULL && temp->data!=data)
        {
            if(data < temp->data) temp = temp->left;
            else temp = temp->right;
        }
        return temp;

    }
    node* tree_min(node *x)
	{
		if(x!=NULL)
		{
			while(x->left!=NULL)
			{
				x = x->left;
			}
			return x;
		}
		else return NULL;
	}
    node* tree_max  (node *x)
    {
        if(x!=NULL)
        {
            while(x->right!=NULL)
            {
                x = x->right;
            }
            return x;
        }
        else return NULL;
    }

    void inorder_tree_walk(node *x)
    {
        if(x!=NULL)
        {
            inorder_tree_walk(x->left);
            cout << x->data << "	";
            inorder_tree_walk(x->right);
        }
    }
    void preorder_tree_walk(node *x)
    {
        if(x!=NULL)
        {
            cout << x->data << "	";
            preorder_tree_walk(x->left);
            preorder_tree_walk(x->right);
        }
    }
    void postorder_tree_walk(node *x)
    {
        if(x!=NULL)
        {
            postorder_tree_walk(x->left);
            postorder_tree_walk(x->right);
            cout << x->data << "	";
        }
    }
    node *tree_predecessor(node *x)
    {
        if(x->right!=NULL)
        {
            return tree_min(x->right);
        }
        else
        {
            node *y = x->parent;
            while(y!=NULL && x==y->right)
            {
                x = y;
                y = y->parent;
            }
            return y;
        }
    }



     node *get_root ()
    {
        return root;
    }
    node *get_parent(node *x)
    {
        return x->parent;
    }

    node *tree_successor(node *x)
    {
        if(x->right!=NULL)
        {
            return tree_min(x->right);
        }
        else
        {
            node *y = x->parent;
            while(y!=NULL && x==y->right)
            {
                x = y;
                y = y->parent;
            }
            return y;
        }
    }
   
   
    node *tree_delete(node *x)
    {   
        node *temp = root;
        if(temp==NULL) return temp;
        else if(x->data < temp->data) temp->left = tree_delete(x);
        else if(x->data > temp->data) temp->right = tree_delete(x);
        else{
            // case 1: no child
            if(temp->left==NULL && temp->right==NULL)
            {
                delete temp;
                temp = NULL;
                return temp;
            }
            // case 2: one child
            else if(temp->left==NULL)
            {
                node *newNode = temp->right;
                delete temp;
                return newNode;
            }
            else if(temp->right==NULL)
            {
                node *newNode = temp->left;
                delete temp;
                return newNode;
            }
            else{
                node *y = tree_successor(temp);
                temp->data = y->data;
                temp->right = tree_delete(y);

           
        }

        
    }
    }

};
int main()
{
	binary_tree bt;
	node *x, *ret;
	int data, ch, key;

	while(1)
	{
		printf("\n----------MENU----------\n");
		printf("\n(1)INSERT");
		printf("\n(2)TREE_MIN");
		printf("\n(3)SEARCH");
		printf("\n(4)INORDER-VIEW");
		printf("\n(5)SUCCESSOR");
		printf("\n(6)DELETE");
		printf("\n(7)EXIT");
		printf("\n------------------------\n");

		scanf("%d",&ch);

		switch(ch)
		{
			case 1: // insert
					printf("\n------------------------------");
					printf("\nEnter Integer Data : ");
					scanf("%d",&data);
					printf("\n------------------------------");

					x = new node(data);
		
					bt.insert(x);
					printf("\n...........Inserted...........\n");
					break;

			case 2: // Tree min
					ret = bt.tree_min(bt.get_root());

					if(ret == NULL) printf("\n......Tree is empty......\n");
					else
					{
						printf("\n------------------------------");
						printf("\nMinimum Data : ");
						printf("%d",ret->data);
						printf("\n------------------------------");
					}
					break;

			case 3: // Search
					printf("\nEnter Data : ");
					scanf("%d",&key);
					ret = bt.search(key);
					if(ret == NULL)printf("\nNOT FOUND\n");
					else
					{
						printf("\n------------------------------");
						printf("\nData : ");
						printf("%d",ret->data);
						printf("\n------------------------------");
					}
					break;

			case 4: // Inorder traversal
					bt.inorder_tree_walk(bt.get_root());
					break;

			case 5:
					printf("\nEnter Data : ");
					scanf("%d",&key);
					ret = bt.search(key);
					if(ret == NULL)printf("Not found");
					else
					{	
						ret = bt.tree_successor(ret);
						if(ret == NULL)printf("No successor available\n");
						else
						{
							printf("\n------------------------------");
					        printf("\nSuccessor Data : ");	
							printf("%d",ret->data);
					        printf("\n------------------------------");
						}
					}
					break;

			case 6: // delete
	            	printf("\nEnter Data : ");
					scanf("%d",&key);
					ret = bt.search(key);
				    if(ret == NULL)printf("Not found");
					else
					{
						ret = bt.tree_delete(ret);
				        printf("\n------------------------------");
			     		printf("\nDeleted Data : ");
				        printf("%d",ret->data);
				 		printf("\n------------------------------");
				       	delete ret;
					}
					break;

			case 7: // Exit
					exit(0);
					break;

			default:
					printf("\nWRONG CHOICE\n");
					break;
		}
	}
	return 0;

}
